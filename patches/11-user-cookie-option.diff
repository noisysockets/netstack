--- a/pkg/tcpip/stack/packet_buffer.go
+++ b/pkg/tcpip/stack/packet_buffer.go
@@ -161,6 +161,10 @@ type PacketBuffer struct {
 	// NetworkPacketInfo holds an incoming packet's network-layer information.
 	NetworkPacketInfo NetworkPacketInfo
 
+	// userCookie is used to store a user supplied cookie value associated with
+	// the packet.
+	UserCookie uint32
+
 	tuple *tuple
 
 	// onRelease is a function to be run when the packet buffer is no longer
--- a/pkg/tcpip/tcpip.go
+++ b/pkg/tcpip/tcpip.go
@@ -1412,6 +1412,14 @@ const (
 	TCPTimeWaitReuseLoopbackOnly
 )
 
+// TCPUserCookieOption is used by SetSockOpt/GetSockOpt to set/get a user
+// specified cookie value on a TCP endpoint.
+type TCPUserCookieOption uint32
+
+func (*TCPUserCookieOption) isGettableSocketOption() {}
+
+func (*TCPUserCookieOption) isSettableSocketOption() {}
+
 // LingerOption is used by SetSockOpt/GetSockOpt to set/get the
 // duration for which a socket lingers before returning from Close.
 //
--- a/pkg/tcpip/transport/tcp/accept.go
+++ b/pkg/tcpip/transport/tcp/accept.go
@@ -202,6 +202,7 @@ func (l *listenContext) createConnectingEndpoint(s *segment, rcvdSynOpts header.
 	n.boundNICID = s.pkt.NICID
 	n.route = route
 	n.effectiveNetProtos = []tcpip.NetworkProtocolNumber{s.pkt.NetworkProtocolNumber}
+	n.userCookie = s.pkt.UserCookie
 	n.ops.SetReceiveBufferSize(int64(l.rcvWnd), false /* notify */)
 	n.amss = calculateAdvertisedMSS(n.userMSS, n.route)
 	n.setEndpointState(StateConnecting)
diff --git a/pkg/tcpip/transport/tcp/endpoint.go b/pkg/tcpip/transport/tcp/endpoint.go
index b9ae74eb008..3953af56a74 100644
--- a/pkg/tcpip/transport/tcp/endpoint.go
+++ b/pkg/tcpip/transport/tcp/endpoint.go
@@ -582,6 +582,10 @@ type Endpoint struct {
 	// to an out of window segment being received by this endpoint.
 	lastOutOfWindowAckTime tcpip.MonotonicTime
 
+	// userCookie is used to store a user supplied cookie value associated with
+	// the endpoint.
+	userCookie uint32
+
 	// finWait2Timer is used to reap orphaned sockets in FIN-WAIT-2 where the peer
 	// is yet to send a FIN but on our end the socket is fully closed i.e. endpoint.Close()
 	// has been called on the socket. This timer is not started for sockets that
@@ -2032,6 +2036,11 @@ func (e *Endpoint) SetSockOpt(opt tcpip.SettableSocketOption) tcpip.Error {
 	case *tcpip.SocketDetachFilterOption:
 		return nil
 
+	case *tcpip.TCPUserCookieOption:
+		e.LockUser()
+		e.userCookie = uint32(*v)
+		e.UnlockUser()
+
 	default:
 		return nil
 	}
@@ -2205,6 +2214,11 @@ func (e *Endpoint) GetSockOpt(opt tcpip.GettableSocketOption) tcpip.Error {
 			Port: port,
 		}
 
+	case *tcpip.TCPUserCookieOption:
+		e.LockUser()
+		*o = tcpip.TCPUserCookieOption(e.userCookie)
+		e.UnlockUser()
+
 	default:
 		return &tcpip.ErrUnknownProtocolOption{}
 	}
