--- a/pkg/tcpip/tcpip.go
+++ b/pkg/tcpip/tcpip.go
@@ -1412,6 +1412,14 @@ const (
 	TCPTimeWaitReuseLoopbackOnly
 )
 
+// UserCookieOption is used by SetSockOpt/GetSockOpt to set/get a user
+// specified cookie value.
+type UserCookieOption uint32
+
+func (*UserCookieOption) isGettableSocketOption() {}
+
+func (*UserCookieOption) isSettableSocketOption() {}
+
 // LingerOption is used by SetSockOpt/GetSockOpt to set/get the
 // duration for which a socket lingers before returning from Close.
 //
--- a/pkg/tcpip/transport/internal/network/endpoint.go
+++ b/pkg/tcpip/transport/internal/network/endpoint.go
@@ -74,6 +74,11 @@ type Endpoint struct {
 	// +checklocks:mu
 	ipv6TClass uint8
 
+	// userCookie is used to store a user supplied cookie value associated with
+	// the endpoint.
+	// +checklocks:mu
+	userCookie uint32
+
 	// Lock ordering: mu > infoMu.
 	infoMu sync.RWMutex `state:"nosave"`
 	// info has a dedicated mutex so that we can avoid lock ordering violations
@@ -984,6 +989,11 @@ func (e *Endpoint) SetSockOpt(opt tcpip.SettableSocketOption) tcpip.Error {
 
 	case *tcpip.SocketDetachFilterOption:
 		return nil
+
+	case *tcpip.UserCookieOption:
+		e.mu.Lock()
+		e.userCookie = uint32(*v)
+		e.mu.Unlock()
 	}
 	return nil
 }
@@ -999,6 +1009,11 @@ func (e *Endpoint) GetSockOpt(opt tcpip.GettableSocketOption) tcpip.Error {
 		}
 		e.mu.Unlock()
 
+	case *tcpip.UserCookieOption:
+		e.mu.Lock()
+		*o = tcpip.UserCookieOption(e.userCookie)
+		e.mu.Unlock()
+
 	default:
 		return &tcpip.ErrUnknownProtocolOption{}
 	}
--- a/pkg/tcpip/transport/tcp/endpoint.go
+++ b/pkg/tcpip/transport/tcp/endpoint.go
@@ -582,6 +582,10 @@ type Endpoint struct {
 	// to an out of window segment being received by this endpoint.
 	lastOutOfWindowAckTime tcpip.MonotonicTime
 
+	// userCookie is used to store a user supplied cookie value associated with
+	// the endpoint.
+	userCookie uint32
+
 	// finWait2Timer is used to reap orphaned sockets in FIN-WAIT-2 where the peer
 	// is yet to send a FIN but on our end the socket is fully closed i.e. endpoint.Close()
 	// has been called on the socket. This timer is not started for sockets that
@@ -2032,6 +2036,11 @@ func (e *Endpoint) SetSockOpt(opt tcpip.SettableSocketOption) tcpip.Error {
 	case *tcpip.SocketDetachFilterOption:
 		return nil
 
+	case *tcpip.UserCookieOption:
+		e.LockUser()
+		e.userCookie = uint32(*v)
+		e.UnlockUser()
+
 	default:
 		return nil
 	}
@@ -2205,6 +2214,11 @@ func (e *Endpoint) GetSockOpt(opt tcpip.GettableSocketOption) tcpip.Error {
 			Port: port,
 		}
 
+	case *tcpip.UserCookieOption:
+		e.LockUser()
+		*o = tcpip.UserCookieOption(e.userCookie)
+		e.UnlockUser()
+
 	default:
 		return &tcpip.ErrUnknownProtocolOption{}
 	}
